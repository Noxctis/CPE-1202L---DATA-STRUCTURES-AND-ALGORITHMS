#include <stdio.h>
#include <stdlib.h>

#define MAX_NAME_LENGTH 25
#define MAX_NUMBER_LENGTH 15
#define MAX_EMAIL_LENGTH 25

typedef struct Contact{
    char firstName[MAX_NAME_LENGTH];
    char middleName[MAX_NAME_LENGTH];
    char lastName[MAX_NAME_LENGTH];
    char mobileNumber[MAX_NUMBER_LENGTH];
    char emailAddress[MAX_EMAIL_LENGTH];
} Contact;

typedef struct Node {
    struct Node* prev;
    Contact contact;
    struct Node* next;
} Node;

typedef struct {
    Node *top; // points to the top node of the list
    Node *end;
} LinkedList;

void push(LinkedList* list);
void pop(LinkedList* list);
void show(LinkedList* list);

int main(){
  LinkedList list;
  list.top = NULL;
  push(&list);
  push(&list);
  pop(&list);
  
  return 0;
}


void push(LinkedList* list) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }
    printf("Input First Name: ");
    fflush(stdin);
    gets(newNode->contact.firstName);
    printf("Input Middle Name: ");
    gets(newNode->contact.middleName);
    printf("Input Last Name: ");
    gets(newNode->contact.lastName);
    printf("Input Mobile No.: ");
    gets(newNode->contact.mobileNumber);
    printf("Input Email Address: ");
    gets(newNode->contact.emailAddress);
    
    newNode->prev = NULL; // Initialize next pointer
    newNode->next = NULL; // Initialize next pointer

    if (list->top == NULL) {
        list->top = newNode;
        list->end = newNode;
    } else {
        list->end->next = newNode;
        newNode->prev = list->end;
        list->end = newNode;
    }
}

void pop(LinkedList* list) {
    if (list->top == NULL) {
        printf("Stack is empty.\n");
        return;
    }

    Node *temp = list->top;
    Node *prev = NULL;
    list->top = list->top->next;
    printf("Contact popped:\n");
    free(temp);
}